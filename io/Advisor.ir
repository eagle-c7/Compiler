; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@strend = global i8 0
@strnewline = global i8 10
@strseq = global i8 124
@strspace = global i8 32
@strcomma = global i8 44
@strsemicolon = global i8 59
@str0 = global i8 48
@str1 = global i8 49
@str2 = global i8 50
@str3 = global i8 51
@str4 = global i8 52
@str5 = global i8 53
@gradeA = global i8 65
@gradeB = global i8 66
@gradeC = global i8 67
@gradeD = global i8 68
@gradeE = global i8 69
@gradeF = global i8 70
@0 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@1 = private unnamed_addr constant [11 x i8] c"GPA: %.1f\0A\00", align 1
@2 = private unnamed_addr constant [10 x i8] c"GPA: 0.0\0A\00", align 1
@3 = private unnamed_addr constant [21 x i8] c"Hours Attempted: %d\0A\00", align 1
@4 = private unnamed_addr constant [21 x i8] c"Hours Completed: %d\0A\00", align 1
@5 = private unnamed_addr constant [24 x i8] c"Credits Remaining: %d\0A\0A\00", align 1
@6 = private unnamed_addr constant [31 x i8] c"Possible Courses to Take Next\0A\00", align 1
@7 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@8 = private unnamed_addr constant [27 x i8] c"  None - Congratulations!\0A\00", align 1
@9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@10 = private unnamed_addr constant [3 x i8] c"%c\00", align 1

declare i32 @printk(i32*, ...)

declare i32 @scank(i8*, ...)

define i32 @myStrlen(i8* %0) {
BBEntry:
  %s = alloca i8*, align 8
  store i8* %0, i8** %s, align 8
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %i, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %BBEntry1, %BBEntry
  %1 = load i32, i32* %i, align 4
  %2 = load i8*, i8** %s, align 8
  %3 = getelementptr i8, i8* %2, i32 %1
  %4 = load i8, i8* %3, align 1
  %5 = load i8, i8* @strend, align 1
  %6 = icmp ne i8 %4, %5
  br i1 %6, label %BBEntry1, label %ForExit

ForExit:                                          ; preds = %ForCmp
  %7 = load i32, i32* %i, align 4
  ret i32 %7

BBEntry1:                                         ; preds = %ForCmp
  %8 = load i32, i32* %i, align 4
  %9 = add i32 %8, 1
  store i32 %9, i32* %i, align 4
  br label %ForCmp
}

define i32 @charAddStr(i8 %0, i8* %1) {
BBEntry:
  %s = alloca i8*, align 8
  store i8* %1, i8** %s, align 8
  %chr = alloca i8, align 1
  store i8 %0, i8* %chr, align 1
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %2 = load i8*, i8** %s, align 8
  %3 = call i32 @myStrlen(i8* %2)
  %4 = add i32 %3, 1
  store i32 %4, i32* %i, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %BBEntry1, %BBEntry
  %5 = load i32, i32* %i, align 4
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %BBEntry1, label %ForExit

ForExit:                                          ; preds = %ForCmp
  %7 = load i8, i8* %chr, align 1
  %8 = load i8*, i8** %s, align 8
  %9 = bitcast i8* %8 to i8*
  store i8 %7, i8* %9, align 1
  ret i32 0

BBEntry1:                                         ; preds = %ForCmp
  %10 = load i32, i32* %i, align 4
  %11 = sub i32 %10, 1
  %12 = load i8*, i8** %s, align 8
  %13 = getelementptr i8, i8* %12, i32 %11
  %14 = load i8, i8* %13, align 1
  %15 = load i32, i32* %i, align 4
  %16 = load i8*, i8** %s, align 8
  %17 = getelementptr i8, i8* %16, i32 %15
  store i8 %14, i8* %17, align 1
  %18 = load i32, i32* %i, align 4
  %19 = sub i32 %18, 1
  store i32 %19, i32* %i, align 4
  br label %ForCmp
}

define i32 @charLeaveStr(i8* %0) {
BBEntry:
  %s = alloca i8*, align 8
  store i8* %0, i8** %s, align 8
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %len = alloca i32, align 4
  %1 = load i8*, i8** %s, align 8
  %2 = call i32 @myStrlen(i8* %1)
  store i32 %2, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %ForIter, %BBEntry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %len, align 4
  %5 = icmp slt i32 %3, %4
  br i1 %5, label %BBEntry1, label %ForExit

ForIter:                                          ; preds = %BBEntry1
  %6 = load i32, i32* %i, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %i, align 4
  br label %ForCmp

ForExit:                                          ; preds = %ForCmp
  ret i32 0

BBEntry1:                                         ; preds = %ForCmp
  %8 = load i32, i32* %i, align 4
  %9 = add i32 %8, 1
  %10 = load i8*, i8** %s, align 8
  %11 = getelementptr i8, i8* %10, i32 %9
  %12 = load i8, i8* %11, align 1
  %13 = load i32, i32* %i, align 4
  %14 = load i8*, i8** %s, align 8
  %15 = getelementptr i8, i8* %14, i32 %13
  store i8 %12, i8* %15, align 1
  br label %ForIter
}

define i32 @eqStr(i8* %0, i8* %1) {
BBEntry:
  %s2 = alloca i8*, align 8
  store i8* %1, i8** %s2, align 8
  %s1 = alloca i8*, align 8
  store i8* %0, i8** %s1, align 8
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %i, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %BBExit, %BBEntry
  %2 = load i32, i32* %i, align 4
  %3 = load i8*, i8** %s1, align 8
  %4 = getelementptr i8, i8* %3, i32 %2
  %5 = load i8, i8* %4, align 1
  %6 = load i8, i8* @strend, align 1
  %7 = icmp ne i8 %5, %6
  %8 = load i32, i32* %i, align 4
  %9 = load i8*, i8** %s2, align 8
  %10 = getelementptr i8, i8* %9, i32 %8
  %11 = load i8, i8* %10, align 1
  %12 = load i8, i8* @strend, align 1
  %13 = icmp ne i8 %11, %12
  %14 = select i1 %7, i1 true, i1 %13
  br i1 %14, label %BBEntry1, label %ForExit

ForExit:                                          ; preds = %ForCmp
  ret i32 1

BBEntry1:                                         ; preds = %ForCmp
  %15 = load i32, i32* %i, align 4
  %16 = load i8*, i8** %s1, align 8
  %17 = getelementptr i8, i8* %16, i32 %15
  %18 = load i8, i8* %17, align 1
  %19 = load i32, i32* %i, align 4
  %20 = load i8*, i8** %s2, align 8
  %21 = getelementptr i8, i8* %20, i32 %19
  %22 = load i8, i8* %21, align 1
  %23 = icmp ne i8 %18, %22
  br i1 %23, label %BBEntry2, label %BBExit

BBEntry2:                                         ; preds = %BBEntry1
  ret i32 0
  br label %BBExit

BBExit:                                           ; preds = %BBEntry1, %BBEntry2
  %24 = load i32, i32* %i, align 4
  %25 = add i32 %24, 1
  store i32 %25, i32* %i, align 4
  br label %ForCmp
}

define i32 @copyStr(i8* %0, i8* %1, i32 %2, i8 %3) {
BBEntry:
  %seq = alloca i8, align 1
  store i8 %3, i8* %seq, align 1
  %begin = alloca i32, align 4
  store i32 %2, i32* %begin, align 4
  %s2 = alloca i8*, align 8
  store i8* %1, i8** %s2, align 8
  %s1 = alloca i8*, align 8
  store i8* %0, i8** %s1, align 8
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %i, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %ForIter, %BBEntry
  %4 = load i32, i32* %begin, align 4
  %5 = load i8*, i8** %s2, align 8
  %6 = getelementptr i8, i8* %5, i32 %4
  %7 = load i8, i8* %6, align 1
  %8 = load i8, i8* %seq, align 1
  %9 = icmp ne i8 %7, %8
  br i1 %9, label %BBEntry1, label %ForExit

ForIter:                                          ; preds = %BBEntry1
  %10 = load i32, i32* %i, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %i, align 4
  br label %ForCmp

ForExit:                                          ; preds = %ForCmp
  %12 = load i8, i8* @strend, align 1
  %13 = load i32, i32* %i, align 4
  %14 = load i8*, i8** %s1, align 8
  %15 = getelementptr i8, i8* %14, i32 %13
  store i8 %12, i8* %15, align 1
  ret i32 0

BBEntry1:                                         ; preds = %ForCmp
  %16 = load i32, i32* %begin, align 4
  %17 = load i8*, i8** %s2, align 8
  %18 = getelementptr i8, i8* %17, i32 %16
  %19 = load i8, i8* %18, align 1
  %20 = load i32, i32* %i, align 4
  %21 = load i8*, i8** %s1, align 8
  %22 = getelementptr i8, i8* %21, i32 %20
  store i8 %19, i8* %22, align 1
  %23 = load i32, i32* %begin, align 4
  %24 = add i32 %23, 1
  store i32 %24, i32* %begin, align 4
  br label %ForIter
}

define i32 @appendStr(i8* %0, i8* %1, i8 %2) {
BBEntry:
  %seq = alloca i8, align 1
  store i8 %2, i8* %seq, align 1
  %s2 = alloca i8*, align 8
  store i8* %1, i8** %s2, align 8
  %s1 = alloca i8*, align 8
  store i8* %0, i8** %s1, align 8
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %len = alloca i32, align 4
  %3 = load i8*, i8** %s1, align 8
  %4 = call i32 @myStrlen(i8* %3)
  store i32 %4, i32* %len, align 4
  %5 = load i8, i8* %seq, align 1
  %6 = load i32, i32* %len, align 4
  %7 = load i8*, i8** %s1, align 8
  %8 = getelementptr i8, i8* %7, i32 %6
  store i8 %5, i8* %8, align 1
  %9 = load i32, i32* %len, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %ForIter, %BBEntry
  %11 = load i32, i32* %i, align 4
  %12 = load i8*, i8** %s2, align 8
  %13 = getelementptr i8, i8* %12, i32 %11
  %14 = load i8, i8* %13, align 1
  %15 = load i8, i8* @strend, align 1
  %16 = icmp ne i8 %14, %15
  br i1 %16, label %BBEntry1, label %ForExit

ForIter:                                          ; preds = %BBEntry1
  %17 = load i32, i32* %i, align 4
  %18 = add i32 %17, 1
  store i32 %18, i32* %i, align 4
  br label %ForCmp

ForExit:                                          ; preds = %ForCmp
  %19 = load i8, i8* @strend, align 1
  %20 = load i32, i32* %len, align 4
  %21 = load i8*, i8** %s1, align 8
  %22 = getelementptr i8, i8* %21, i32 %20
  store i8 %19, i8* %22, align 1
  ret i32 0

BBEntry1:                                         ; preds = %ForCmp
  %23 = load i32, i32* %i, align 4
  %24 = load i8*, i8** %s2, align 8
  %25 = getelementptr i8, i8* %24, i32 %23
  %26 = load i8, i8* %25, align 1
  %27 = load i32, i32* %len, align 4
  %28 = load i8*, i8** %s1, align 8
  %29 = getelementptr i8, i8* %28, i32 %27
  store i8 %26, i8* %29, align 1
  %30 = load i32, i32* %len, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %len, align 4
  br label %ForIter
}

define i32 @getSubStr(i8* %0, i8* %1, i32 %2, i8 %3) {
BBEntry:
  %seq = alloca i8, align 1
  store i8 %3, i8* %seq, align 1
  %index = alloca i32, align 4
  store i32 %2, i32* %index, align 4
  %str = alloca i8*, align 8
  store i8* %1, i8** %str, align 8
  %substr = alloca i8*, align 8
  store i8* %0, i8** %substr, align 8
  %begin = alloca i32, align 4
  store i32 0, i32* %begin, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %ForIter, %BBEntry
  %4 = load i32, i32* %index, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %BBEntry1, label %ForExit

ForIter:                                          ; preds = %WhileExit
  %6 = load i32, i32* %index, align 4
  %7 = sub i32 %6, 1
  store i32 %7, i32* %index, align 4
  br label %ForCmp

ForExit:                                          ; preds = %ForCmp
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %WhileCmp3

BBEntry1:                                         ; preds = %ForCmp
  br label %WhileCmp

WhileCmp:                                         ; preds = %BBEntry2, %BBEntry1
  %8 = load i32, i32* %begin, align 4
  %9 = load i8*, i8** %str, align 8
  %10 = getelementptr i8, i8* %9, i32 %8
  %11 = load i8, i8* %10, align 1
  %12 = load i8, i8* %seq, align 1
  %13 = icmp ne i8 %11, %12
  br i1 %13, label %BBEntry2, label %WhileExit

WhileExit:                                        ; preds = %WhileCmp
  %14 = load i32, i32* %begin, align 4
  %15 = add i32 %14, 1
  store i32 %15, i32* %begin, align 4
  br label %ForIter

BBEntry2:                                         ; preds = %WhileCmp
  %16 = load i32, i32* %begin, align 4
  %17 = add i32 %16, 1
  store i32 %17, i32* %begin, align 4
  br label %WhileCmp

WhileCmp3:                                        ; preds = %BBEntry5, %ForExit
  %18 = load i32, i32* %begin, align 4
  %19 = load i8*, i8** %str, align 8
  %20 = getelementptr i8, i8* %19, i32 %18
  %21 = load i8, i8* %20, align 1
  %22 = load i8, i8* %seq, align 1
  %23 = icmp ne i8 %21, %22
  %24 = load i32, i32* %begin, align 4
  %25 = load i8*, i8** %str, align 8
  %26 = getelementptr i8, i8* %25, i32 %24
  %27 = load i8, i8* %26, align 1
  %28 = load i8, i8* @strend, align 1
  %29 = icmp ne i8 %27, %28
  %30 = select i1 %23, i1 %29, i1 false
  br i1 %30, label %BBEntry5, label %WhileExit4

WhileExit4:                                       ; preds = %WhileCmp3
  %31 = load i8, i8* @strend, align 1
  %32 = load i32, i32* %i, align 4
  %33 = load i8*, i8** %substr, align 8
  %34 = getelementptr i8, i8* %33, i32 %32
  store i8 %31, i8* %34, align 1
  ret i32 0

BBEntry5:                                         ; preds = %WhileCmp3
  %35 = load i32, i32* %begin, align 4
  %36 = load i8*, i8** %str, align 8
  %37 = getelementptr i8, i8* %36, i32 %35
  %38 = load i8, i8* %37, align 1
  %39 = load i32, i32* %i, align 4
  %40 = load i8*, i8** %substr, align 8
  %41 = getelementptr i8, i8* %40, i32 %39
  store i8 %38, i8* %41, align 1
  %42 = load i32, i32* %i, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %i, align 4
  %44 = load i32, i32* %begin, align 4
  %45 = add i32 %44, 1
  store i32 %45, i32* %begin, align 4
  br label %WhileCmp3
}

define i32 @getSubCnt(i8* %0, i8 %1) {
BBEntry:
  %seq = alloca i8, align 1
  store i8 %1, i8* %seq, align 1
  %str = alloca i8*, align 8
  store i8* %0, i8** %str, align 8
  %index = alloca i32, align 4
  store i32 0, i32* %index, align 4
  %cnt = alloca i32, align 4
  store i32 1, i32* %cnt, align 4
  %2 = load i8*, i8** %str, align 8
  %3 = bitcast i8* %2 to i8*
  %4 = load i8, i8* %3, align 1
  %5 = load i8, i8* @strend, align 1
  %6 = icmp eq i8 %4, %5
  br i1 %6, label %BBEntry1, label %BBExit

BBEntry1:                                         ; preds = %BBEntry
  ret i32 0
  br label %BBExit

BBExit:                                           ; preds = %BBEntry, %BBEntry1
  store i32 0, i32* %index, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %BBExit4, %BBExit
  %7 = load i32, i32* %index, align 4
  %8 = load i8*, i8** %str, align 8
  %9 = getelementptr i8, i8* %8, i32 %7
  %10 = load i8, i8* %9, align 1
  %11 = load i8, i8* @strend, align 1
  %12 = icmp ne i8 %10, %11
  br i1 %12, label %BBEntry2, label %ForExit

ForExit:                                          ; preds = %ForCmp
  %13 = load i32, i32* %cnt, align 4
  ret i32 %13

BBEntry2:                                         ; preds = %ForCmp
  %14 = load i32, i32* %index, align 4
  %15 = load i8*, i8** %str, align 8
  %16 = getelementptr i8, i8* %15, i32 %14
  %17 = load i8, i8* %16, align 1
  %18 = load i8, i8* %seq, align 1
  %19 = icmp eq i8 %17, %18
  br i1 %19, label %BBEntry3, label %BBExit4

BBEntry3:                                         ; preds = %BBEntry2
  %20 = load i32, i32* %cnt, align 4
  %21 = add i32 %20, 1
  store i32 %21, i32* %cnt, align 4
  br label %BBExit4

BBExit4:                                          ; preds = %BBEntry2, %BBEntry3
  %22 = load i32, i32* %index, align 4
  %23 = add i32 %22, 1
  store i32 %23, i32* %index, align 4
  br label %ForCmp
}

define i32 @getStrIndex(i8* %0, i8* %1, i8 %2) {
BBEntry:
  %seq = alloca i8, align 1
  store i8 %2, i8* %seq, align 1
  %str = alloca i8*, align 8
  store i8* %1, i8** %str, align 8
  %substr = alloca i8*, align 8
  store i8* %0, i8** %substr, align 8
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %i2 = alloca i32, align 4
  store i32 0, i32* %i2, align 4
  %index = alloca i32, align 4
  store i32 0, i32* %index, align 4
  %temp = alloca i32, align 4
  store i32 0, i32* %temp, align 4
  br label %WhileCmp

WhileCmp:                                         ; preds = %WhileExit7, %BBEntry
  %3 = load i32, i32* %temp, align 4
  %4 = load i8*, i8** %str, align 8
  %5 = getelementptr i8, i8* %4, i32 %3
  %6 = load i8, i8* %5, align 1
  %7 = load i8, i8* @strend, align 1
  %8 = icmp ne i8 %6, %7
  br i1 %8, label %BBEntry1, label %WhileExit

WhileExit:                                        ; preds = %WhileCmp
  ret i32 0

BBEntry1:                                         ; preds = %WhileCmp
  store i32 0, i32* %i, align 4
  br label %WhileCmp2

WhileCmp2:                                        ; preds = %BBEntry4, %BBEntry1
  %9 = load i32, i32* %i, align 4
  %10 = load i8*, i8** %substr, align 8
  %11 = getelementptr i8, i8* %10, i32 %9
  %12 = load i8, i8* %11, align 1
  %13 = load i8, i8* @strend, align 1
  %14 = icmp ne i8 %12, %13
  %15 = load i32, i32* %i2, align 4
  %16 = load i8*, i8** %str, align 8
  %17 = getelementptr i8, i8* %16, i32 %15
  %18 = load i8, i8* %17, align 1
  %19 = load i8, i8* @strend, align 1
  %20 = icmp ne i8 %18, %19
  %21 = select i1 %14, i1 %20, i1 false
  %22 = load i32, i32* %i2, align 4
  %23 = load i8*, i8** %str, align 8
  %24 = getelementptr i8, i8* %23, i32 %22
  %25 = load i8, i8* %24, align 1
  %26 = load i8, i8* %seq, align 1
  %27 = icmp ne i8 %25, %26
  %28 = select i1 %21, i1 %27, i1 false
  %29 = load i32, i32* %i2, align 4
  %30 = load i8*, i8** %str, align 8
  %31 = getelementptr i8, i8* %30, i32 %29
  %32 = load i8, i8* %31, align 1
  %33 = load i32, i32* %i, align 4
  %34 = load i8*, i8** %substr, align 8
  %35 = getelementptr i8, i8* %34, i32 %33
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %32, %36
  %38 = select i1 %28, i1 %37, i1 false
  br i1 %38, label %BBEntry4, label %WhileExit3

WhileExit3:                                       ; preds = %WhileCmp2
  %39 = load i32, i32* %index, align 4
  %40 = add i32 %39, 1
  store i32 %40, i32* %index, align 4
  %41 = load i32, i32* %i, align 4
  %42 = load i8*, i8** %substr, align 8
  %43 = getelementptr i8, i8* %42, i32 %41
  %44 = load i8, i8* %43, align 1
  %45 = load i8, i8* @strend, align 1
  %46 = icmp eq i8 %44, %45
  %47 = load i32, i32* %i2, align 4
  %48 = load i8*, i8** %str, align 8
  %49 = getelementptr i8, i8* %48, i32 %47
  %50 = load i8, i8* %49, align 1
  %51 = load i8, i8* @strend, align 1
  %52 = icmp eq i8 %50, %51
  %53 = load i32, i32* %i2, align 4
  %54 = load i8*, i8** %str, align 8
  %55 = getelementptr i8, i8* %54, i32 %53
  %56 = load i8, i8* %55, align 1
  %57 = load i8, i8* %seq, align 1
  %58 = icmp eq i8 %56, %57
  %59 = select i1 %52, i1 true, i1 %58
  %60 = select i1 %46, i1 %59, i1 false
  br i1 %60, label %BBEntry5, label %BBExit

BBEntry4:                                         ; preds = %WhileCmp2
  %61 = load i32, i32* %i2, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* %i2, align 4
  %63 = load i32, i32* %i, align 4
  %64 = add i32 %63, 1
  store i32 %64, i32* %i, align 4
  br label %WhileCmp2

BBEntry5:                                         ; preds = %WhileExit3
  %65 = load i32, i32* %index, align 4
  ret i32 %65
  br label %BBExit

BBExit:                                           ; preds = %WhileExit3, %BBEntry5
  br label %WhileCmp6

WhileCmp6:                                        ; preds = %BBEntry8, %BBExit
  %66 = load i32, i32* %i2, align 4
  %67 = load i8*, i8** %str, align 8
  %68 = getelementptr i8, i8* %67, i32 %66
  %69 = load i8, i8* %68, align 1
  %70 = load i8, i8* @strend, align 1
  %71 = icmp ne i8 %69, %70
  %72 = load i32, i32* %i2, align 4
  %73 = load i8*, i8** %str, align 8
  %74 = getelementptr i8, i8* %73, i32 %72
  %75 = load i8, i8* %74, align 1
  %76 = load i8, i8* %seq, align 1
  %77 = icmp ne i8 %75, %76
  %78 = select i1 %71, i1 %77, i1 false
  br i1 %78, label %BBEntry8, label %WhileExit7

WhileExit7:                                       ; preds = %WhileCmp6
  %79 = load i32, i32* %i2, align 4
  store i32 %79, i32* %temp, align 4
  %80 = load i32, i32* %i2, align 4
  %81 = add i32 %80, 1
  store i32 %81, i32* %i2, align 4
  br label %WhileCmp

BBEntry8:                                         ; preds = %WhileCmp6
  %82 = load i32, i32* %i2, align 4
  %83 = add i32 %82, 1
  store i32 %83, i32* %i2, align 4
  br label %WhileCmp6
}

define i32 @charToInt(i8 %0) {
BBEntry:
  %chr = alloca i8, align 1
  store i8 %0, i8* %chr, align 1
  %1 = load i8, i8* %chr, align 1
  %2 = load i8, i8* @str0, align 1
  %3 = icmp eq i8 %1, %2
  br i1 %3, label %BBEntry1, label %BBExit

BBEntry1:                                         ; preds = %BBEntry
  ret i32 0
  br label %BBExit

BBExit:                                           ; preds = %BBEntry, %BBEntry1
  %4 = load i8, i8* %chr, align 1
  %5 = load i8, i8* @str1, align 1
  %6 = icmp eq i8 %4, %5
  br i1 %6, label %BBEntry2, label %BBExit3

BBEntry2:                                         ; preds = %BBExit
  ret i32 1
  br label %BBExit3

BBExit3:                                          ; preds = %BBExit, %BBEntry2
  %7 = load i8, i8* %chr, align 1
  %8 = load i8, i8* @str2, align 1
  %9 = icmp eq i8 %7, %8
  br i1 %9, label %BBEntry4, label %BBExit5

BBEntry4:                                         ; preds = %BBExit3
  ret i32 2
  br label %BBExit5

BBExit5:                                          ; preds = %BBExit3, %BBEntry4
  %10 = load i8, i8* %chr, align 1
  %11 = load i8, i8* @str3, align 1
  %12 = icmp eq i8 %10, %11
  br i1 %12, label %BBEntry6, label %BBExit7

BBEntry6:                                         ; preds = %BBExit5
  ret i32 3
  br label %BBExit7

BBExit7:                                          ; preds = %BBExit5, %BBEntry6
  %13 = load i8, i8* %chr, align 1
  %14 = load i8, i8* @str4, align 1
  %15 = icmp eq i8 %13, %14
  br i1 %15, label %BBEntry8, label %BBExit9

BBEntry8:                                         ; preds = %BBExit7
  ret i32 4
  br label %BBExit9

BBExit9:                                          ; preds = %BBExit7, %BBEntry8
  %16 = load i8, i8* %chr, align 1
  %17 = load i8, i8* @str5, align 1
  %18 = icmp eq i8 %16, %17
  br i1 %18, label %BBEntry10, label %BBExit11

BBEntry10:                                        ; preds = %BBExit9
  ret i32 5
  br label %BBExit11

BBExit11:                                         ; preds = %BBExit9, %BBEntry10
  ret i32 0
}

define i32 @gradeToInt(i8 %0) {
BBEntry:
  %chr = alloca i8, align 1
  store i8 %0, i8* %chr, align 1
  %1 = load i8, i8* %chr, align 1
  %2 = load i8, i8* @gradeA, align 1
  %3 = icmp eq i8 %1, %2
  br i1 %3, label %BBEntry1, label %BBExit

BBEntry1:                                         ; preds = %BBEntry
  ret i32 4
  br label %BBExit

BBExit:                                           ; preds = %BBEntry, %BBEntry1
  %4 = load i8, i8* %chr, align 1
  %5 = load i8, i8* @gradeB, align 1
  %6 = icmp eq i8 %4, %5
  br i1 %6, label %BBEntry2, label %BBExit3

BBEntry2:                                         ; preds = %BBExit
  ret i32 3
  br label %BBExit3

BBExit3:                                          ; preds = %BBExit, %BBEntry2
  %7 = load i8, i8* %chr, align 1
  %8 = load i8, i8* @gradeC, align 1
  %9 = icmp eq i8 %7, %8
  br i1 %9, label %BBEntry4, label %BBExit5

BBEntry4:                                         ; preds = %BBExit3
  ret i32 2
  br label %BBExit5

BBExit5:                                          ; preds = %BBExit3, %BBEntry4
  %10 = load i8, i8* %chr, align 1
  %11 = load i8, i8* @gradeD, align 1
  %12 = icmp eq i8 %10, %11
  br i1 %12, label %BBEntry6, label %BBExit7

BBEntry6:                                         ; preds = %BBExit5
  ret i32 1
  br label %BBExit7

BBExit7:                                          ; preds = %BBExit5, %BBEntry6
  %13 = load i8, i8* %chr, align 1
  %14 = load i8, i8* @gradeF, align 1
  %15 = icmp eq i8 %13, %14
  br i1 %15, label %BBEntry8, label %BBExit9

BBEntry8:                                         ; preds = %BBExit7
  ret i32 0
  br label %BBExit9

BBExit9:                                          ; preds = %BBExit7, %BBEntry8
  ret i32 0
}

define i32 @main() {
BBEntry:
  %coursename = alloca [6 x i8], align 1
  %coursescore = alloca i8, align 1
  store i8 0, i8* %coursescore, align 1
  %coursepre = alloca [1000 x i8], align 1
  %coursegrade = alloca i8, align 1
  store i8 0, i8* %coursegrade, align 1
  %oneline = alloca [1000 x i8], align 1
  %firstchar = alloca i8, align 1
  store i8 0, i8* %firstchar, align 1
  %tempchar = alloca i8, align 1
  store i8 0, i8* %tempchar, align 1
  %score = alloca i32, align 4
  store i32 0, i32* %score, align 4
  %grade = alloca i32, align 4
  store i32 0, i32* %grade, align 4
  %score_learn = alloca i32, align 4
  store i32 0, i32* %score_learn, align 4
  %score_get = alloca i32, align 4
  store i32 0, i32* %score_get, align 4
  %score_remain = alloca i32, align 4
  store i32 0, i32* %score_remain, align 4
  %gpa = alloca i32, align 4
  store i32 0, i32* %gpa, align 4
  %cnt = alloca i32, align 4
  store i32 0, i32* %cnt, align 4
  %names = alloca [1000 x i8], align 1
  %pres = alloca [1000000 x i8], align 1
  %learned = alloca [100 x i32], align 4
  %learnable = alloca [100 x i32], align 4
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %j, align 4
  %index = alloca i32, align 4
  store i32 0, i32* %index, align 4
  %cursor = alloca i32, align 4
  store i32 0, i32* %cursor, align 4
  %orCnt = alloca i32, align 4
  store i32 0, i32* %orCnt, align 4
  %andCnt = alloca i32, align 4
  store i32 0, i32* %andCnt, align 4
  %learn = alloca i32, align 4
  store i32 0, i32* %learn, align 4
  %orStr = alloca [100 x i8], align 1
  %andStr = alloca [6 x i8], align 1
  br label %WhileCmp

WhileCmp:                                         ; preds = %BBExit39, %BBEntry
  %0 = call i32 (i8*, ...) @scank(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), i8* %firstchar)
  %1 = load i8, i8* %firstchar, align 1
  %2 = load i8, i8* @strnewline, align 1
  %3 = icmp eq i8 %1, %2
  br i1 %3, label %BBEntry2, label %BBExit33

BBEntry2:                                         ; preds = %WhileCmp
  %4 = bitcast [1000 x i8]* %names to i8*
  %5 = call i32 @charLeaveStr(i8* %4)
  %6 = bitcast [1000000 x i8]* %pres to i8*
  %7 = call i32 @charLeaveStr(i8* %6)
  store i32 0, i32* %cursor, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %BBExit20, %BBEntry2
  %8 = load i32, i32* %cursor, align 4
  %9 = load i32, i32* %cnt, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %BBEntry3, label %ForExit

ForExit:                                          ; preds = %ForCmp
  %11 = load i32, i32* %score_learn, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %BBEntry21, label %BBEntry22

BBEntry3:                                         ; preds = %ForCmp
  %13 = load i32, i32* %cursor, align 4
  %14 = bitcast [100 x i32]* %learned to i32*
  %15 = getelementptr i32, i32* %14, i32 %13
  %16 = load i32, i32* %15, align 4
  br i32 %16, label %BBEntry4, label %BBEntry5

BBEntry4:                                         ; preds = %BBEntry3
  %17 = load i32, i32* %cursor, align 4
  %18 = bitcast [100 x i32]* %learnable to i32*
  %19 = getelementptr i32, i32* %18, i32 %17
  store i32 0, i32* %19, align 4
  br label %BBExit20

BBEntry5:                                         ; preds = %BBEntry3
  %20 = load i32, i32* %cursor, align 4
  %21 = bitcast [100 x i32]* %learnable to i32*
  %22 = getelementptr i32, i32* %21, i32 %20
  store i32 0, i32* %22, align 4
  %23 = bitcast [1000 x i8]* %coursepre to i8*
  %24 = bitcast [1000000 x i8]* %pres to i8*
  %25 = load i32, i32* %cursor, align 4
  %26 = load i8, i8* @strspace, align 1
  %27 = call i32 @getSubStr(i8* %23, i8* %24, i32 %25, i8 %26)
  %28 = bitcast [1000 x i8]* %coursepre to i8*
  %29 = load i8, i8* @strsemicolon, align 1
  %30 = call i32 @getSubCnt(i8* %28, i8 %29)
  store i32 %30, i32* %orCnt, align 4
  %31 = load i32, i32* %orCnt, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %BBEntry6, label %BBExit

BBEntry6:                                         ; preds = %BBEntry5
  %33 = load i32, i32* %cursor, align 4
  %34 = bitcast [100 x i32]* %learnable to i32*
  %35 = getelementptr i32, i32* %34, i32 %33
  store i32 1, i32* %35, align 4
  br label %BBExit

BBExit:                                           ; preds = %BBEntry5, %BBEntry6
  store i32 0, i32* %i, align 4
  br label %ForCmp7

ForCmp7:                                          ; preds = %ForExit13, %BBExit
  %36 = load i32, i32* %i, align 4
  %37 = load i32, i32* %orCnt, align 4
  %38 = icmp slt i32 %36, %37
  %39 = load i32, i32* %cursor, align 4
  %40 = bitcast [100 x i32]* %learnable to i32*
  %41 = getelementptr i32, i32* %40, i32 %39
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %38, i1 %43, i1 false
  br i1 %44, label %BBEntry10, label %BBExit20

BBEntry10:                                        ; preds = %ForCmp7
  store i32 1, i32* %learn, align 4
  %45 = bitcast [100 x i8]* %orStr to i8*
  %46 = bitcast [1000 x i8]* %coursepre to i8*
  %47 = load i32, i32* %i, align 4
  %48 = load i8, i8* @strsemicolon, align 1
  %49 = call i32 @getSubStr(i8* %45, i8* %46, i32 %47, i8 %48)
  %50 = bitcast [100 x i8]* %orStr to i8*
  %51 = load i8, i8* @strcomma, align 1
  %52 = call i32 @getSubCnt(i8* %50, i8 %51)
  store i32 %52, i32* %andCnt, align 4
  store i32 0, i32* %j, align 4
  br label %ForCmp11

ForCmp11:                                         ; preds = %BBExit19, %BBEntry10
  %53 = load i32, i32* %j, align 4
  %54 = load i32, i32* %andCnt, align 4
  %55 = icmp slt i32 %53, %54
  %56 = load i32, i32* %learn, align 4
  %57 = icmp eq i32 %56, 1
  %58 = select i1 %55, i1 %57, i1 false
  br i1 %58, label %BBEntry14, label %ForExit13

ForExit13:                                        ; preds = %ForCmp11
  %59 = load i32, i32* %learn, align 4
  %60 = load i32, i32* %cursor, align 4
  %61 = bitcast [100 x i32]* %learnable to i32*
  %62 = getelementptr i32, i32* %61, i32 %60
  store i32 %59, i32* %62, align 4
  %63 = load i32, i32* %i, align 4
  %64 = add i32 %63, 1
  store i32 %64, i32* %i, align 4
  br label %ForCmp7

BBEntry14:                                        ; preds = %ForCmp11
  %65 = bitcast [6 x i8]* %andStr to i8*
  %66 = bitcast [100 x i8]* %orStr to i8*
  %67 = load i32, i32* %j, align 4
  %68 = load i8, i8* @strcomma, align 1
  %69 = call i32 @getSubStr(i8* %65, i8* %66, i32 %67, i8 %68)
  %70 = bitcast [6 x i8]* %andStr to i8*
  %71 = bitcast [1000 x i8]* %names to i8*
  %72 = load i8, i8* @strspace, align 1
  %73 = call i32 @getStrIndex(i8* %70, i8* %71, i8 %72)
  store i32 %73, i32* %index, align 4
  %74 = load i32, i32* %index, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %BBEntry15, label %BBEntry16

BBEntry15:                                        ; preds = %BBEntry14
  store i32 0, i32* %learn, align 4
  br label %BBExit19

BBEntry16:                                        ; preds = %BBEntry14
  %76 = load i32, i32* %index, align 4
  %77 = sub i32 %76, 1
  store i32 %77, i32* %index, align 4
  %78 = load i32, i32* %index, align 4
  %79 = bitcast [100 x i32]* %learned to i32*
  %80 = getelementptr i32, i32* %79, i32 %78
  %81 = load i32, i32* %80, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %BBEntry17, label %BBExit19

BBEntry17:                                        ; preds = %BBEntry16
  store i32 0, i32* %learn, align 4
  br label %BBExit19

BBExit19:                                         ; preds = %BBEntry17, %BBEntry16, %BBEntry15
  %83 = load i32, i32* %j, align 4
  %84 = add i32 %83, 1
  store i32 %84, i32* %j, align 4
  br label %ForCmp11

BBExit20:                                         ; preds = %ForCmp7, %BBEntry4
  %85 = load i32, i32* %cursor, align 4
  %86 = add i32 %85, 1
  store i32 %86, i32* %cursor, align 4
  br label %ForCmp

BBEntry21:                                        ; preds = %ForExit
  %87 = load i32, i32* %gpa, align 4
  %88 = sitofp i32 %87 to double
  %89 = fmul double 1.000000e+00, %88
  %90 = load i32, i32* %score_learn, align 4
  %91 = sitofp i32 %90 to double
  %92 = fdiv double %89, %91
  %93 = call i32 (i32*, ...) @printk(i32* bitcast ([11 x i8]* @1 to i32*), double %92)
  br label %BBExit23

BBEntry22:                                        ; preds = %ForExit
  %94 = call i32 (i32*, ...) @printk(i32* bitcast ([10 x i8]* @2 to i32*))
  br label %BBExit23

BBExit23:                                         ; preds = %BBEntry22, %BBEntry21
  %95 = load i32, i32* %score_learn, align 4
  %96 = call i32 (i32*, ...) @printk(i32* bitcast ([21 x i8]* @3 to i32*), i32 %95)
  %97 = load i32, i32* %score_get, align 4
  %98 = call i32 (i32*, ...) @printk(i32* bitcast ([21 x i8]* @4 to i32*), i32 %97)
  %99 = load i32, i32* %score_remain, align 4
  %100 = call i32 (i32*, ...) @printk(i32* bitcast ([24 x i8]* @5 to i32*), i32 %99)
  %101 = call i32 (i32*, ...) @printk(i32* bitcast ([31 x i8]* @6 to i32*))
  %102 = load i32, i32* %score_remain, align 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %BBEntry24, label %BBEntry31

BBEntry24:                                        ; preds = %BBExit23
  store i32 0, i32* %cursor, align 4
  br label %ForCmp25

ForCmp25:                                         ; preds = %BBExit30, %BBEntry24
  %104 = load i32, i32* %cursor, align 4
  %105 = load i32, i32* %cnt, align 4
  %106 = icmp slt i32 %104, %105
  br i1 %106, label %BBEntry28, label %BBExit32

BBEntry28:                                        ; preds = %ForCmp25
  %107 = load i32, i32* %cursor, align 4
  %108 = bitcast [100 x i32]* %learnable to i32*
  %109 = getelementptr i32, i32* %108, i32 %107
  %110 = load i32, i32* %109, align 4
  %111 = icmp eq i32 %110, 1
  br i1 %111, label %BBEntry29, label %BBExit30

BBEntry29:                                        ; preds = %BBEntry28
  %112 = bitcast [6 x i8]* %coursename to i8*
  %113 = bitcast [1000 x i8]* %names to i8*
  %114 = load i32, i32* %cursor, align 4
  %115 = load i8, i8* @strspace, align 1
  %116 = call i32 @getSubStr(i8* %112, i8* %113, i32 %114, i8 %115)
  %117 = call i32 (i32*, ...) @printk(i32* bitcast ([6 x i8]* @7 to i32*), [6 x i8]* %coursename)
  br label %BBExit30

BBExit30:                                         ; preds = %BBEntry28, %BBEntry29
  %118 = load i32, i32* %cursor, align 4
  %119 = add i32 %118, 1
  store i32 %119, i32* %cursor, align 4
  br label %ForCmp25

BBEntry31:                                        ; preds = %BBExit23
  %120 = call i32 (i32*, ...) @printk(i32* bitcast ([27 x i8]* @8 to i32*))
  br label %BBExit32

BBExit32:                                         ; preds = %ForCmp25, %BBEntry31
  ret i32 0
  br label %BBExit33

BBExit33:                                         ; preds = %WhileCmp, %BBExit32
  %121 = call i32 (i8*, ...) @scank(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @9, i32 0, i32 0), [1000 x i8]* %oneline)
  %122 = call i32 (i8*, ...) @scank(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @10, i32 0, i32 0), i8* %tempchar)
  %123 = load i8, i8* %firstchar, align 1
  %124 = bitcast [1000 x i8]* %oneline to i8*
  %125 = call i32 @charAddStr(i8 %123, i8* %124)
  store i32 0, i32* %cursor, align 4
  %126 = bitcast [6 x i8]* %coursename to i8*
  %127 = bitcast [1000 x i8]* %oneline to i8*
  %128 = load i32, i32* %cursor, align 4
  %129 = load i8, i8* @strseq, align 1
  %130 = call i32 @copyStr(i8* %126, i8* %127, i32 %128, i8 %129)
  %131 = bitcast [6 x i8]* %coursename to i8*
  %132 = call i32 @myStrlen(i8* %131)
  %133 = add i32 %132, 1
  store i32 %133, i32* %cursor, align 4
  %134 = load i32, i32* %cursor, align 4
  %135 = bitcast [1000 x i8]* %oneline to i8*
  %136 = getelementptr i8, i8* %135, i32 %134
  %137 = load i8, i8* %136, align 1
  store i8 %137, i8* %coursescore, align 1
  %138 = load i32, i32* %cursor, align 4
  %139 = add i32 %138, 2
  store i32 %139, i32* %cursor, align 4
  %140 = bitcast [1000 x i8]* %coursepre to i8*
  %141 = bitcast [1000 x i8]* %oneline to i8*
  %142 = load i32, i32* %cursor, align 4
  %143 = load i8, i8* @strseq, align 1
  %144 = call i32 @copyStr(i8* %140, i8* %141, i32 %142, i8 %143)
  %145 = load i32, i32* %cursor, align 4
  %146 = bitcast [1000 x i8]* %coursepre to i8*
  %147 = call i32 @myStrlen(i8* %146)
  %148 = add i32 %145, %147
  %149 = add i32 %148, 1
  store i32 %149, i32* %cursor, align 4
  %150 = load i32, i32* %cursor, align 4
  %151 = bitcast [1000 x i8]* %oneline to i8*
  %152 = getelementptr i8, i8* %151, i32 %150
  %153 = load i8, i8* %152, align 1
  store i8 %153, i8* %coursegrade, align 1
  %154 = load i8, i8* %coursescore, align 1
  %155 = call i32 @charToInt(i8 %154)
  store i32 %155, i32* %score, align 4
  %156 = load i8, i8* %coursegrade, align 1
  %157 = call i32 @gradeToInt(i8 %156)
  store i32 %157, i32* %grade, align 4
  %158 = load i8, i8* %coursegrade, align 1
  %159 = load i8, i8* @gradeF, align 1
  %160 = icmp eq i8 %158, %159
  br i1 %160, label %BBEntry34, label %BBEntry35

BBEntry34:                                        ; preds = %BBExit33
  %161 = load i32, i32* %score_learn, align 4
  %162 = load i32, i32* %score, align 4
  %163 = add i32 %161, %162
  store i32 %163, i32* %score_learn, align 4
  %164 = load i32, i32* %score_remain, align 4
  %165 = load i32, i32* %score, align 4
  %166 = add i32 %164, %165
  store i32 %166, i32* %score_remain, align 4
  %167 = load i32, i32* %cnt, align 4
  %168 = bitcast [100 x i32]* %learned to i32*
  %169 = getelementptr i32, i32* %168, i32 %167
  store i32 0, i32* %169, align 4
  br label %BBExit39

BBEntry35:                                        ; preds = %BBExit33
  %170 = load i8, i8* %coursegrade, align 1
  %171 = load i8, i8* @strend, align 1
  %172 = icmp eq i8 %170, %171
  br i1 %172, label %BBEntry36, label %BBEntry37

BBEntry36:                                        ; preds = %BBEntry35
  %173 = load i32, i32* %score_remain, align 4
  %174 = load i32, i32* %score, align 4
  %175 = add i32 %173, %174
  store i32 %175, i32* %score_remain, align 4
  %176 = load i32, i32* %cnt, align 4
  %177 = bitcast [100 x i32]* %learned to i32*
  %178 = getelementptr i32, i32* %177, i32 %176
  store i32 0, i32* %178, align 4
  br label %BBExit39

BBEntry37:                                        ; preds = %BBEntry35
  %179 = load i32, i32* %score_learn, align 4
  %180 = load i32, i32* %score, align 4
  %181 = add i32 %179, %180
  store i32 %181, i32* %score_learn, align 4
  %182 = load i32, i32* %score_get, align 4
  %183 = load i32, i32* %score, align 4
  %184 = add i32 %182, %183
  store i32 %184, i32* %score_get, align 4
  %185 = load i32, i32* %gpa, align 4
  %186 = load i32, i32* %grade, align 4
  %187 = load i32, i32* %score, align 4
  %188 = mul i32 %186, %187
  %189 = add i32 %185, %188
  store i32 %189, i32* %gpa, align 4
  %190 = load i32, i32* %cnt, align 4
  %191 = bitcast [100 x i32]* %learned to i32*
  %192 = getelementptr i32, i32* %191, i32 %190
  store i32 1, i32* %192, align 4
  br label %BBExit39

BBExit39:                                         ; preds = %BBEntry36, %BBEntry37, %BBEntry34
  %193 = load i32, i32* %cnt, align 4
  %194 = add i32 %193, 1
  store i32 %194, i32* %cnt, align 4
  %195 = bitcast [1000 x i8]* %names to i8*
  %196 = bitcast [6 x i8]* %coursename to i8*
  %197 = load i8, i8* @strspace, align 1
  %198 = call i32 @appendStr(i8* %195, i8* %196, i8 %197)
  %199 = bitcast [1000000 x i8]* %pres to i8*
  %200 = bitcast [1000 x i8]* %coursepre to i8*
  %201 = load i8, i8* @strspace, align 1
  %202 = call i32 @appendStr(i8* %199, i8* %200, i8 %201)
  br label %WhileCmp
}
