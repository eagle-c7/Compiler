; ModuleID = 'main'
source_filename = "main"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@c = global i32 0
@d = global [100 x i32] undef
@0 = private unnamed_addr constant [6 x i8] c"%d %d\00", align 1
@1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@2 = private unnamed_addr constant [7 x i8] c"%d %d \00", align 1
@3 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@4 = private unnamed_addr constant [25 x i8] c"Incompatible Dimensions\0A\00", align 1
@5 = private unnamed_addr constant [5 x i8] c"%10d\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare i32 @printk(i32*, ...)

declare i32 @scank(i32*, ...)

define i32 @main() {
BBEntry:
  %a2 = alloca i32, align 4
  store i32 0, i32* %a2, align 4
  %b1 = alloca i32, align 4
  store i32 0, i32* %b1, align 4
  %a1 = alloca i32, align 4
  store i32 0, i32* %a1, align 4
  %b2 = alloca i32, align 4
  store i32 2, i32* %b2, align 4
  %0 = load i32, i32* %b2, align 4
  store i32 %0, i32* getelementptr inbounds ([100 x i32], [100 x i32]* @d, i32 0, i32 1), align 4
  %Arr1 = alloca [1000 x i32], align 4
  %Arr2 = alloca [1000 x i32], align 4
  %Res = alloca [1000 x i32], align 4
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %j, align 4
  %k = alloca i32, align 4
  store i32 0, i32* %k, align 4
  %temp1 = alloca i32, align 4
  store i32 0, i32* %temp1, align 4
  %1 = call i32 (i32*, ...) @scank(i32* bitcast ([6 x i8]* @0 to i32*), i32* %a1, i32* %b1)
  store i32 0, i32* %i, align 4
  br label %ForCmp

ForCmp:                                           ; preds = %ForExit4, %BBEntry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %a1, align 4
  %4 = icmp slt i32 %2, %3
  br i1 %4, label %BBEntry1, label %ForExit

ForExit:                                          ; preds = %ForCmp
  %5 = call i32 (i32*, ...) @scank(i32* bitcast ([7 x i8]* @2 to i32*), i32* %a2, i32* %b2)
  store i32 0, i32* %i, align 4
  br label %ForCmp6

BBEntry1:                                         ; preds = %ForCmp
  store i32 0, i32* %j, align 4
  br label %ForCmp2

ForCmp2:                                          ; preds = %BBEntry5, %BBEntry1
  %6 = load i32, i32* %j, align 4
  %7 = load i32, i32* %b1, align 4
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %BBEntry5, label %ForExit4

ForExit4:                                         ; preds = %ForCmp2
  %9 = load i32, i32* %i, align 4
  %10 = add i32 %9, 1
  store i32 %10, i32* %i, align 4
  br label %ForCmp

BBEntry5:                                         ; preds = %ForCmp2
  %11 = call i32 (i32*, ...) @scank(i32* bitcast ([3 x i8]* @1 to i32*), i32* %temp1)
  %12 = load i32, i32* %temp1, align 4
  %13 = load i32, i32* %i, align 4
  %14 = mul i32 %13, 25
  %15 = load i32, i32* %j, align 4
  %16 = add i32 %14, %15
  %17 = bitcast [1000 x i32]* %Arr1 to i32*
  %18 = getelementptr i32, i32* %17, i32 %16
  store i32 %12, i32* %18, align 4
  %19 = load i32, i32* %j, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* %j, align 4
  br label %ForCmp2

ForCmp6:                                          ; preds = %ForExit12, %ForExit
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* %a2, align 4
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %BBEntry9, label %ForExit8

ForExit8:                                         ; preds = %ForCmp6
  %24 = load i32, i32* %b1, align 4
  %25 = load i32, i32* %a2, align 4
  %26 = icmp ne i32 %24, %25
  br i1 %26, label %BBEntry14, label %BBExit

BBEntry9:                                         ; preds = %ForCmp6
  store i32 0, i32* %j, align 4
  br label %ForCmp10

ForCmp10:                                         ; preds = %BBEntry13, %BBEntry9
  %27 = load i32, i32* %j, align 4
  %28 = load i32, i32* %b2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %BBEntry13, label %ForExit12

ForExit12:                                        ; preds = %ForCmp10
  %30 = load i32, i32* %i, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* %i, align 4
  br label %ForCmp6

BBEntry13:                                        ; preds = %ForCmp10
  %32 = call i32 (i32*, ...) @scank(i32* bitcast ([3 x i8]* @3 to i32*), i32* %temp1)
  %33 = load i32, i32* %temp1, align 4
  %34 = load i32, i32* %i, align 4
  %35 = mul i32 %34, 25
  %36 = load i32, i32* %j, align 4
  %37 = add i32 %35, %36
  %38 = bitcast [1000 x i32]* %Arr2 to i32*
  %39 = getelementptr i32, i32* %38, i32 %37
  store i32 %33, i32* %39, align 4
  %40 = load i32, i32* %j, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %j, align 4
  br label %ForCmp10

BBEntry14:                                        ; preds = %ForExit8
  %42 = call i32 (i32*, ...) @printk(i32* bitcast ([25 x i8]* @4 to i32*))
  ret i32 0
  br label %BBExit

BBExit:                                           ; preds = %ForExit8, %BBEntry14
  store i32 0, i32* %i, align 4
  br label %ForCmp15

ForCmp15:                                         ; preds = %ForExit21, %BBExit
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %a1, align 4
  %45 = icmp slt i32 %43, %44
  br i1 %45, label %BBEntry18, label %ForExit17

ForExit17:                                        ; preds = %ForCmp15
  store i32 0, i32* %i, align 4
  br label %ForCmp28

BBEntry18:                                        ; preds = %ForCmp15
  store i32 0, i32* %j, align 4
  br label %ForCmp19

ForCmp19:                                         ; preds = %ForExit25, %BBEntry18
  %46 = load i32, i32* %j, align 4
  %47 = load i32, i32* %b2, align 4
  %48 = icmp slt i32 %46, %47
  br i1 %48, label %BBEntry22, label %ForExit21

ForExit21:                                        ; preds = %ForCmp19
  %49 = load i32, i32* %i, align 4
  %50 = add i32 %49, 1
  store i32 %50, i32* %i, align 4
  br label %ForCmp15

BBEntry22:                                        ; preds = %ForCmp19
  %sum = alloca i32, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %k, align 4
  br label %ForCmp23

ForCmp23:                                         ; preds = %BBEntry26, %BBEntry22
  %51 = load i32, i32* %k, align 4
  %52 = load i32, i32* %b1, align 4
  %53 = icmp slt i32 %51, %52
  br i1 %53, label %BBEntry26, label %ForExit25

ForExit25:                                        ; preds = %ForCmp23
  %54 = load i32, i32* %sum, align 4
  %55 = load i32, i32* %i, align 4
  %56 = mul i32 %55, 25
  %57 = load i32, i32* %j, align 4
  %58 = add i32 %56, %57
  %59 = bitcast [1000 x i32]* %Res to i32*
  %60 = getelementptr i32, i32* %59, i32 %58
  store i32 %54, i32* %60, align 4
  %61 = load i32, i32* %j, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* %j, align 4
  br label %ForCmp19

BBEntry26:                                        ; preds = %ForCmp23
  %temp127 = alloca i32, align 4
  %63 = load i32, i32* %i, align 4
  %64 = mul i32 %63, 25
  %65 = load i32, i32* %k, align 4
  %66 = add i32 %64, %65
  %67 = bitcast [1000 x i32]* %Arr1 to i32*
  %68 = getelementptr i32, i32* %67, i32 %66
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %temp127, align 4
  %temp2 = alloca i32, align 4
  %70 = load i32, i32* %k, align 4
  %71 = mul i32 %70, 25
  %72 = load i32, i32* %j, align 4
  %73 = add i32 %71, %72
  %74 = bitcast [1000 x i32]* %Arr2 to i32*
  %75 = getelementptr i32, i32* %74, i32 %73
  %76 = load i32, i32* %75, align 4
  store i32 %76, i32* %temp2, align 4
  %77 = load i32, i32* %sum, align 4
  %78 = load i32, i32* %temp127, align 4
  %79 = load i32, i32* %temp2, align 4
  %80 = mul i32 %78, %79
  %81 = add i32 %77, %80
  store i32 %81, i32* %sum, align 4
  %82 = load i32, i32* %k, align 4
  %83 = add i32 %82, 1
  store i32 %83, i32* %k, align 4
  br label %ForCmp23

ForCmp28:                                         ; preds = %ForExit34, %ForExit17
  %84 = load i32, i32* %i, align 4
  %85 = load i32, i32* %a1, align 4
  %86 = icmp slt i32 %84, %85
  br i1 %86, label %BBEntry31, label %ForExit30

ForExit30:                                        ; preds = %ForCmp28
  ret i32 0

BBEntry31:                                        ; preds = %ForCmp28
  store i32 0, i32* %j, align 4
  br label %ForCmp32

ForCmp32:                                         ; preds = %BBEntry35, %BBEntry31
  %87 = load i32, i32* %j, align 4
  %88 = load i32, i32* %b2, align 4
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %BBEntry35, label %ForExit34

ForExit34:                                        ; preds = %ForCmp32
  %90 = call i32 (i32*, ...) @printk(i32* bitcast ([2 x i8]* @6 to i32*))
  %91 = load i32, i32* %i, align 4
  %92 = add i32 %91, 1
  store i32 %92, i32* %i, align 4
  br label %ForCmp28

BBEntry35:                                        ; preds = %ForCmp32
  %temp = alloca i32, align 4
  %93 = load i32, i32* %i, align 4
  %94 = mul i32 %93, 25
  %95 = load i32, i32* %j, align 4
  %96 = add i32 %94, %95
  %97 = bitcast [1000 x i32]* %Res to i32*
  %98 = getelementptr i32, i32* %97, i32 %96
  %99 = load i32, i32* %98, align 4
  store i32 %99, i32* %temp, align 4
  %100 = load i32, i32* %temp, align 4
  %101 = call i32 (i32*, ...) @printk(i32* bitcast ([5 x i8]* @5 to i32*), i32 %100)
  %102 = load i32, i32* %j, align 4
  %103 = add i32 %102, 1
  store i32 %103, i32* %j, align 4
  br label %ForCmp32
}
